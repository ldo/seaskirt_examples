#!/usr/bin/python3
#+
# Seaskirt example: simple listener for Asterisk Manager events.
#
# Copyright 2023 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0 <https://creativecommons.org/publicdomain/zero/1.0/>;
# do with it what you will.
#-

import sys
import time
import signal
import asyncio
import getopt
import seaskirt

poll_delay = 0.25 # to ensure output gets periodically flushed
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["debug", "password=", "ssl-ca=", "user=", "want="]
  )
user = None
password = None
ssl_ca = None
debug = False
events_wanted = None
for keyword, value in opts :
    if keyword == "--debug" :
        debug = True
    elif keyword == "--password" :
        password = value
    elif keyword == "--ssl-ca" :
        ssl_ca = value
    elif keyword == "--user" :
        user = value
    elif keyword == "--want" :
        if events_wanted == None :
            events_wanted = set()
        #end if
        events_wanted.add(value.lower())
    #end if
#end for
if user == None or password == None :
    raise getopt.GetoptError("--user and --password are required")
#end if

run_done = None

def set_run_done() :
    if not run_done.done() :
        run_done.set_result(None)
    #end if
#end set_run_done

def interrupted(signum, frame) :
    if run_done != None :
        run_done.get_loop().call_soon_threadsafe(set_run_done)
    #end if
#end interrupted

signal.signal(signal.SIGTERM, interrupted) # kill(1) command
signal.signal(signal.SIGINT, interrupted) # CTRL/C on controlling terminal

async def main() :
    global run_done
    run_done = asyncio.get_running_loop().create_future()
    # Note that run_done can be set at any point in following
    mgr = evt = None
    while True :
        if mgr == None :
            step = seaskirt.ManagerAsync \
              (
                username = user,
                password = password,
                ssl_context = ssl_ca,
                want_events = True,
                debug = debug
              )
        else :
            step = mgr.get_response(poll_delay)
        #end if
        step = asyncio.create_task(step)
        await asyncio.wait([step, run_done], return_when = asyncio.FIRST_COMPLETED)
        if run_done.done() :
            step.cancel()
            break
        #end if
        assert step.done()
        step = step.result()
        if mgr == None :
            mgr = step
            if debug :
                sys.stdout.write("Manager conn opened, hello = \"%s\"\n" % mgr.hello)
            #end if
        else :
            evt = step
        #end if
        if evt != None :
            if events_wanted == None or evt["Event"].lower() in events_wanted :
                sys.stdout.write \
                  (
                        "%s: Event: \"%s\", contents {%s}\n"
                    %
                        (
                                "%04d-%02d-%02d %02d:%02d:%02dZ"
                            %
                                time.gmtime()[:6],
                            evt["Event"],
                            ", ".join
                              (
                                "%s : %s" % (repr(key), repr(evt[key]))
                                for key in sorted(evt.keys())
                              )
                        )
                  )
            #end if
        else :
            # sys.stderr.write("No events yet\n") # debug
            sys.stderr.flush() # so I can log to file without losing events
        #end if
    #end while
    if mgr != None :
        await mgr.close()
    #end if
#end main

asyncio.run(main())
