#!/usr/bin/python
#+
# Test of using Asterisk ChanSpy application. Note this assumes that a context
# named "call_monitor" has been defined in extensions.conf, something like this:
#
#    [call_monitor]
#    exten => s,1,Playback(monitored)
#    exten => s,n,ChanSpy(${VICTIM})
#    exten => s,n,Hangup()
#
# Created 2008 September 30 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
import time
import getopt
import seaskirt

#+
# Call setup parameters
#-

from_channel = "Zap/1"
to_context = "loopback"
to_extension = "12345"
spy_channel = "IAX2/hypatia"
spy_context = "call_monitor"
spy_extension = "s"

#+
# Mainline
#-

opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["debug", "password=", "user="]
  )
user = None
password = None
debug = False
timeout = 10 # default
for keyword, value in opts :
    if keyword == "--debug" :
        debug = True
    elif keyword == "--password" :
        password = value
    elif keyword == "--user" :
        user = value
    #end if
#end for
if user == None or password == None :
    raise getopt.GetoptError("--user and --password are required")
#end if

the_conn = seaskirt.Manager()
if debug :
    the_conn.debug = True
#end if
sys.stdout.write("the_conn opened, hello = \"%s\"\n" % the_conn.hello)
the_conn.authenticate(user, password)

response = the_conn.transact \
  (
    action = "Originate",
    parms =
        {
            "Channel" : from_channel,
            "Context" : to_context,
            "Exten" : to_extension,
            "Priority" : 1,
            "timeout" : int(round(timeout * 1000)),
        }
  )
sys.stdout.write(repr(response) + "\n")

time.sleep(5) # just for fun

response = the_conn.transact \
  (
    action = "Originate",
    parms =
        {
            "Channel" : spy_channel,
            "Context" : spy_context,
            "Exten" : spy_extension,
            "Priority" : 1,
            "Timeout" : int(round(timeout * 1000)),
        },
    vars =
        {
            "VICTIM" : from_channel,
        },
  )
sys.stdout.write(repr(response) + "\n")

the_conn.transact("Logoff", {})
the_conn.close()
