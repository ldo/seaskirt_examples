#!/usr/bin/python3
#+
# Seaskirt example: combined use of AMI and AGI (via “Async AGI” mode)
# to play selected audio files to caller.
#
# The audio files should be kept (or symlinked) in a subdirectory
# named hack/audio relative to the parent directory containing the
# script itself. They should have names consisting entirely of digits,
# optionally followed by some suitable extension; these digits will
# become the extensions that can be dialled by the caller to play
# those respective files. The file formats can be any format that
# is understood by FFmpeg.
#
# For example, a file named “123.wav” would be chosen by the caller
# dialling “123”.
#
# To make use of this script, create a context in extensions.conf
# that looks something like
#
#     [audio-player]
#     exten => _X.,1,Verbose(entering audio player)
#     exten => _X.,n,AGI(agi:async,audio-player)
#     exten => _X.,n,Verbose(exiting audio player)
#     exten => _X.,n,Hangup()
#
# Note the use of the first AGI argument “audio-player” to indicate
# that AsyncAGIStart events generated on this channel should be
# handled by this script.
#
# External program needed: ffmpeg.
#
# Copyright 2023 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0 <https://creativecommons.org/publicdomain/zero/1.0/>;
# do with it what you will.
#-

import sys
import os
import time
import signal
import subprocess
import tempfile
import shutil
import re
import asyncio
import urllib.parse
import getopt
import seaskirt

AUDIO_DIR = os.path.join(os.path.split(sys.argv[0])[0], "hack/audio")
  # where to find the audio files
audio_files = {}

def collect_audio_files() :
    for item in os.listdir(AUDIO_DIR) :
        match = re.search(r"^([0-9]+)(?:\..*)$", item)
        if match != None :
            exten = match.group(1)
            if exten in AUDIO_DIR :
                sys.stderr.write \
                  (
                        "ignore duplicate exten “%s” for file “%s” (already got “%s”)"
                    %
                        (exten, os.path.join(AUDIO_DIR, item), audio_files[exten])
                  )
            else :
                audio_files[exten] = os.path.join(AUDIO_DIR, item)
            #end if
        else :
            sys.stderr.write("ignore non-media file “%s”" % os.path.join(AUDIO_DIR, item))
        #end if
    #end for
#end collect_audio_files

#+
# Mainline
#-

run_done = None

def set_run_done() :
    if not run_done.done() :
        run_done.set_result(None)
    #end if
#end set_run_done

def interrupted(signum, frame) :
    if run_done != None :
        sys.stderr.write("setting run_done\n")
        run_done.get_loop().call_soon_threadsafe(set_run_done)
    #end if
#end interrupted

poll_delay = 0.25
  # to ensure output gets periodically flushed, and also
  # check for terminated child processes
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["debug", "user=", "password="]
  )

user = None
password = None
debug = False
for keyword, value in opts :
    if keyword == "--debug" :
        debug = True
    elif keyword == "--password" :
        password = value
    elif keyword == "--user" :
        user = value
    #end if
#end for
if user == None or password == None :
    raise getopt.GetoptError("--user and --password are required")
#end if

collect_audio_files()
sys.stderr.write("audio_files = %s\n" % repr(audio_files)) # debug
if len(audio_files) == 0 :
    raise getopt.GetoptError("no audio files found")
#end if

signal.signal(signal.SIGTERM, interrupted) # kill(1) command
signal.signal(signal.SIGINT, interrupted) # user hit CTRL/C

tempdir = tempfile.mkdtemp(prefix = "aster-audio-player")
if debug :
    sys.stderr.write("tempdir = %s\n" % tempdir)
#end if
pipe_seq = 0

async def main() :
    global run_done, pipe_seq
    children = []
    run_done = asyncio.get_running_loop().create_future()
    # Note that run_done can be set at any point in following
    mgr = await seaskirt.ManagerAsync \
      (
        username = user,
        password = password,
        want_events = True,
        debug = debug
      )
    last_flush = 0
    while True :
        evt = asyncio.create_task \
          (
            mgr.get_response(max(poll_delay + last_flush - time.monotonic(), 0))
          )
        await asyncio.wait([evt, run_done], return_when = asyncio.FIRST_COMPLETED)
        if run_done.done() :
            evt.cancel()
            break
        #end if
        assert evt.done()
        evt = evt.result()
        if evt != None :
            if debug or "Event" in evt :
                sys.stderr.write \
                  (
                        "Event: {%s}\n"
                    %
                        (
                            ", ".join
                              (
                                "%s : %s" % (repr(key), repr(evt[key]))
                                for key in sorted(evt.keys())
                              )
                        )
                  )
            #end if
            if evt.get("Event") == "AsyncAGIStart" :
                env = dict \
                  (
                    l.split(": ", 1)
                    for l in urllib.parse.unquote(evt["Env"]).rstrip("\x0a").split("\x0a")
                  )
                if debug :
                    sys.stderr.write("evt env = %s\n" % repr(env))
                #end if
                if env["agi_arg_1"] == "audio-player" :
                    audio_file = audio_files.get(evt["Exten"])
                    if audio_file != None :
                        await mgr.send_request \
                          (
                            action = "AGI",
                            parms =
                                {
                                    "Channel" : evt["Channel"],
                                    "Command" :
                                            "VERBOSE \"Play audio for extension %s\"' 3"
                                        %
                                            repr(evt["Exten"]),
                                }
                          )
                        pipe_seq += 1
                        outpipe_base = os.path.join(tempdir, "%0.6d" % pipe_seq)
                          # This is the name of the media file that I pass to Asterisk
                          # (no extension allowed).
                        outpipe_full = outpipe_base + ".gsm"
                          # This is the actual name of the file, and hopefully Asterisk
                          # will use this name.
                        os.mkfifo(outpipe_full, mode = 0o600)
                          # Instead of saving converted audio to an actual file, I feed
                          # it to Asterisk via a pipe. I see console complaints about
                          # it being nonseekable and a zero-length file, but nevertheless
                          # this seems to work.
                        child = subprocess.Popen \
                          (
                            args =
                                (
                                    "ffmpeg", "-i", audio_file,
                                    "-loglevel", "quiet",
                                      # quiet messages, unfortunately quiets error reports as well
                                    "-f", "gsm", "-acodec", "gsm", "-ar", "8000",
                                    "-af", ",".join(["lowpass=f=3000"] * 16),
                                    "-y", outpipe_full,
                                ),
                            stdin = subprocess.DEVNULL,
                            stdout = subprocess.DEVNULL,
                          )
                        await mgr.send_request \
                          (
                            action = "AGI",
                            parms =
                                {
                                    "Channel" : evt["Channel"],
                                    "Command" : "ANSWER",
                                }
                          )
                        await mgr.send_request \
                          (
                            action = "AGI",
                            parms =
                                {
                                    "Channel" : evt["Channel"],
                                    "Command" : "STREAM FILE \"%s\" \"\"" % outpipe_base,
                                }
                          )
                        children.append \
                          (
                            {
                                "channel" : evt["Channel"],
                                "proc" : child,
                                "outpipe_base" : outpipe_base,
                                "outpipe_full" : outpipe_full,
                                "done_output" : False,
                                "waited" : False,
                            }
                          )
                        sys.stderr.write("Started playback on channel %s\n" % evt["Channel"])
                    else :
                        await mgr.send_request \
                          (
                            action = "AGI",
                            parms =
                                {
                                    "Channel" : evt["Channel"],
                                    "Command" :
                                        "VERBOSE \"No such extension %s\"' 3" % repr(evt["Exten"]),
                                }
                          )
                        await mgr.send_request \
                          (
                            action = "AGI",
                            parms =
                                {
                                    "Channel" : evt["Channel"],
                                    "Command" : "HANGUP",
                                    #"Cause" : "21", # call rejected
                                }
                          )
                    #end if
                else :
                    sys.stderr.write(" -- event not for me\n")
                #end if
            elif evt.get("Event") == "AGIExecEnd" and evt["Command"].startswith("STREAM FILE") :
                child = tuple \
                  (
                    (i, c)
                    for i, c in enumerate(children)
                    if c["channel"] == evt["Channel"]
                      # sequential search good enough for small nr connections
                  )
                if len(child) > 0 :
                    (i, child), = child
                    sys.stderr.write("Ending playback on channel %s\n" % child["channel"])
                    await mgr.send_request \
                      (
                        action = "AGI",
                        parms =
                            {
                                "Channel" : child["channel"],
                                "Command" : "ASYNCAGI BREAK",
                            }
                      )
                    child["done_output"] = True
                    if child["waited"] :
                        os.unlink(child["outpipe_full"])
                        children.pop(i)
                    else :
                        # fun fact: if I kill the ffmpeg process prematurely (as happened when
                        # I forgot to check that the AGIExecEnd event was for the STREAM FILE
                        # command), then Asterisk leaves a PJSIP channel behind that
                        # cannot be hung up. This is because opening the FIFO for reading
                        # was blocked--writing something to the pipe (if you can still find it)
                        # will unblock it.
                        child["proc"].kill()
                    #end if
                else :
                    sys.stderr.write("AGIExecEnd not on one of my channels: %s\n" % evt["Channel"])
                #end if
            #end if
        #end if
        now = time.monotonic()
        if now - last_flush >= poll_delay :
            sys.stderr.flush() # so I can log to file without losing events
            try :
                waited = os.waitpid(-1, os.WNOHANG)
            except ChildProcessError :
                waited = (0, 0)
            #end try
            if waited[0] != 0 :
                child = tuple((i, c) for i, c in enumerate(children) if c["proc"].pid == waited[0])
                  # sequential search good enough for small nr connections
                if len(child) > 0 :
                    (i, child), = child
                    if debug or waited[1] != 0 :
                        sys.stderr.write("child pid %d terminated with status %d\n" % waited)
                    #end if
                    child["waited"] = True
                    if child["done_output"] :
                        os.unlink(child["outpipe_full"])
                        children.pop(i)
                    #end if
                else :
                    sys.stderr.write("child pid %d, status %d is not one of mine\n" % waited)
                #end if
            #end if
            last_flush = now
        #end if
    #end while
    await mgr.close()
#end main

asyncio.run(main())

shutil.rmtree(tempdir)
