#!/usr/bin/python3
#+
# This script originates a call and monitors events to
# determine the status of the number dialled. This version
# uses ARI with events filtered by a custom application name.
# Correct use of such filtering requires low-level control
# over channel setup and bridging.
#
# Invoke as follows:
#
#     track_call --user=«username» --password=«password» [--debug] \
#          «inchannel» «outchannel»
#
# where «inchannel» and «outchannel» can take forms like (going
# through the dialplan) “Local/«exten»@«context” or (to directly call
# through a VoIP provider) “PJSIP/«number»@«endpoint»” or (for a local
# SIP phone) “PJSIP/«endpoint»”.
#
# Copyright 2023 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import time
import math
import signal
import asyncio
import getopt
import seaskirt
from seaskirt import \
    RESTMETHOD

APPNAME = "track_call"
  # needs to be unique to distinguish events from other potential clients

debug = False
username = password = None
event_timeout = 30 # how long to wait for next significant event
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["debug", "password=", "user="]
  )
for keyword, value in opts :
    if keyword == "--debug" :
        debug = True
    elif keyword == "--password" :
        password = value
    elif keyword == "--user" :
        username = value
    #end if
#end for
if username == None or password == None :
    raise getopt.GetoptError("need --user and --password")
#end if
if len(args) != 2 :
    raise getopt.GetoptError("usage: %s «inchannel» «channel»" % sys.argv[0])
#end if
inchannel, outchannel = args

run_done = None

def logline(msg) :
    now = time.time()
    now_ts = time.gmtime(math.floor(now))
    now_frac = now - math.floor(now)
    timestamp = \
        (
            "%0.4d%0.2d%0.2d-%0.2d%0.2d%06.3fZ"
        %
            (
                now_ts.tm_year, now_ts.tm_mon, now_ts.tm_mday,
                now_ts.tm_hour, now_ts.tm_min, now_ts.tm_sec + now_frac,
            )
        )
    sys.stderr.write("%s: %s\n" % (timestamp, msg))
#end logline

def set_run_done() :
    if not run_done.done() :
        run_done.set_result(None)
    #end if
#end set_run_done

def interrupted(signum, frame) :
    if run_done != None :
        sys.stderr.write("setting run_done\n")
        run_done.get_loop().call_soon_threadsafe(set_run_done)
    #end if
#end interrupted

signal.signal(signal.SIGTERM, interrupted) # kill(1) command
signal.signal(signal.SIGINT, interrupted) # user hit CTRL/C

async def main() :

    async def create_channel(endpoint, appname, description) :
        response = await control.request \
          (
            method = RESTMETHOD.POST,
            path = "/channels",
            params =
                {
                    "endpoint" : endpoint,
                    "app" : appname,
                }
          )
        logline("%s channel creation response = %s" % (description, repr(response))) # debug
        this_channel_id = response["id"]
        return \
            this_channel_id
    #end create_channel

#begin main
    try :
        global run_done
        loop = asyncio.get_running_loop()
        run_done = loop.create_future()
        control = await seaskirt.StasisAsync \
          (
            username = username,
            password = password,
            debug = debug
          )
        listener = await control.listen(apps = [APPNAME], subscribe_all = False)
        response = await control.request \
          (
            method = RESTMETHOD.POST,
            path = "/bridges",
            params =
                {
                    "type" : "mixing",
                    "name" : "call_being_tracked",
                }
          )
        logline("bridge creation response = %s" % repr(response)) # debug
        bridge_id = response["id"]
        in_channel_id = await create_channel(inchannel, APPNAME, "inbound")
        out_channel_id = await create_channel(outchannel, APPNAME, "outbound")
        logline("Calling %s" % outchannel)
        awaiting_event = None
        while True :
            if awaiting_event == None :
                awaiting_event = asyncio.create_task \
                  (
                    listener.get_event(timeout = event_timeout)
                  )
            #end if
            await asyncio.wait \
              (
                [awaiting_event, run_done],
                return_when = asyncio.FIRST_COMPLETED
              )
            if run_done.done() :
                break
            if awaiting_event.done() :
                event = awaiting_event.result()
                awaiting_event = None
                if event == None :
                    logline("No response from Manager in %s seconds" % event_timeout)
                    break
                #end if
                if debug :
                    logline("event: %s" % repr(event))
                #end if
                event_type = event["type"]
                if event.get("application") != APPNAME :
                    logline \
                      (
                            "This event is not for me%s"
                        %
                            (lambda : ": %s" % repr(event), lambda : "")[debug]()
                              # don’t dump out event if already dumped out
                      )
                elif event_type == "ChannelCreated" :
                    channel_id = event["channel"]["id"]
                    logline \
                      (
                            "Progress: Call ID = %s, name = %s"
                        %
                            (channel_id, event["channel"]["name"])
                      )
                    if channel_id not in (in_channel_id, out_channel_id) :
                        # there is a third channel created for the PJSIP end, with
                        # name “PJSIP/«context»-«serialnr»” (note no “;«n»” suffix).
                        logline("Unrecognized created channel %s" % channel_id)
                    #end if
                elif event_type == "StasisStart" :
                    channel_id = event["channel"]["id"]
                    if channel_id in (in_channel_id, out_channel_id) :
                        logline("Handling Stasis for channel %s" % channel_id)
                        try :
                            await control.request \
                              (
                                method = RESTMETHOD.POST,
                                path = "/channels/%s/answer" % channel_id
                              )
                        except seaskirt.ARIError as err :
                            logline("Error answering channel: %s" % str(err))
                        else :
                            await control.request \
                              (
                                method = RESTMETHOD.POST,
                                path = "/bridges/%s/addChannel" % bridge_id,
                                params =
                                    {
                                        "channel" :
                                            (in_channel_id, out_channel_id)
                                                [channel_id == out_channel_id],
                                        "role" : ("inbound", "outbound")[channel_id == out_channel_id],
                                    }
                              )
                        #end try
                    else :
                        logline("Unrecognized stasis-start channel %s" % channel_id)
                    #end if
                elif (
                        event_type == "ChannelStateChange"
                    and
                        event["channel"]["id"] == out_channel_id
                ) :
                    state = event["channel"]["state"]
                    logline("Call %s in state %s" % (out_channel_id, state))
                elif event_type == "ChannelDestroyed" :
                    logline \
                      (
                            "Call %s hung up with code %s"
                        %
                            (event["channel"]["id"], event["cause"])
                      )
                    set_run_done()
                elif event_type == "Dial" :
                    if (
                            "peer" in event
                        and
                            "caller" in event["peer"]
                    ) :
                        logline \
                          (
                                "Dial = %s, name = %s"
                            %
                                (event["peer"]["id"], event["peer"]["name"])
                          )
                        if (
                                event["dialstatus"] == "PROGRESS"
                            and
                                event["peer"]["id"] == out_channel_id
                        ) :
                            logline("Call %s progressing" % out_channel_id)
                        #end if
                    #end if
                #end if
            #end if
        #end while
        leftover = await control.request \
          (
            method = RESTMETHOD.GET,
            path = "/bridges/" + bridge_id
          )
        for channel in leftover["channels"] :
            logline("hangup leftover channel %s" % channel)
            await control.request \
              (
                method = RESTMETHOD.DELETE,
                path = "/channels/%s" % channel,
                params =
                    {
                        "reason" : "timeout",
                    }
              )
        #end for
        await control.request \
          (
            method = RESTMETHOD.DELETE,
            path = "/bridges/" + bridge_id
          )
        if awaiting_event != None :
            awaiting_event.cancel()
        #end if
        await listener.close()
        logline("track_call ends")
    except Exception as err :
        sys.stderr.write("main fail %s\n" % repr(err))
    #end try
#end main

asyncio.run(main())
